substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
# create first names for students
student_roster$first_name <- firstup(colsplit(student_roster$Name," ", c("First","Last"))[,1])
# set student seed
student_roster$seed <- student_roster$Student_ID
## List file names of individualized exam prompts
PS_path <- "PS01/student_responses"
problem_sets <- list.files(PS_path, recursive = T)
graded_PS <- problem_sets[grepl("_graded", problem_sets)]
View(student_roster)
hist(student_roster$PS01)
hist(student_roster$PS01, xlab="Score", main="Problem Set 1")
# load student roster
student_roster <- read.csv("../grades/grades.csv")
# remove people who didn't complete assignment
student_roster <- student_roster[!is.na(student_roster$PS01),]
# create function to re-label first names correctly
firstup <- function(x) {
x <- tolower(x)
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
# load student roster
student_roster <- read.csv("../grades/grades.csv")
# remove people who didn't complete assignment
#student_roster <- student_roster[!is.na(student_roster$PS01),]
# create function to re-label first names correctly
firstup <- function(x) {
x <- tolower(x)
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
# create first names for students
student_roster$first_name <- firstup(colsplit(student_roster$Name," ", c("First","Last"))[,1])
# set student seed
student_roster$seed <- student_roster$Student_ID
View(student_roster)
mean(student_roster$PS01)
mean(student_roster$PS01, na.rm=T)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("dplyr", "rmarkdown", "emayili", "reshape2"),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load student roster
student_roster <- read.csv("../grades/grades.csv")
# remove people who didn't complete assignment
#student_roster <- student_roster[!is.na(student_roster$PS01),]
# create function to re-label first names correctly
firstup <- function(x) {
x <- tolower(x)
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
# create first names for students
student_roster$first_name <- firstup(colsplit(student_roster$Name," ", c("First","Last"))[,1])
# set student seed
student_roster$seed <- student_roster$Student_ID
student_roster <- student_roster[!is.na(student_roster$PS02),]
## List file names of individualized exam prompts
PS_path <- "PS03/graded"
problem_sets <- list.files(PS_path, recursive = T)
graded_PS <- problem_sets[grepl("_graded", problem_sets)]
graded_PS
## List file names of individualized exam prompts
PS_path <- "PS03/graded"
problem_sets <- list.files(PS_path, recursive = T)
graded_PS <- problem_sets[grepl("_graded", problem_sets)]
graded_PS
View(student_roster)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("dplyr", "rmarkdown", "emayili", "reshape2"),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load student roster
student_roster <- read.csv("../grades/grades.csv")
# remove people who didn't complete assignment
#student_roster <- student_roster[!is.na(student_roster$PS01),]
# create function to re-label first names correctly
firstup <- function(x) {
x <- tolower(x)
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
# create first names for students
student_roster$first_name <- firstup(colsplit(student_roster$Name," ", c("First","Last"))[,1])
# set student seed
student_roster$seed <- student_roster$Student_ID
student_roster <- student_roster[!is.na(student_roster$PS02),]
## List file names of individualized exam prompts
PS_path <- "PS03/graded"
problem_sets <- list.files(PS_path, recursive = T)
graded_PS <- problem_sets[grepl("_graded", problem_sets)]
graded_PS
View(student_roster)
# load student roster
student_roster <- read.csv("../grades/grades.csv")
# remove people who didn't complete assignment
#student_roster <- student_roster[!is.na(student_roster$PS01),]
# create function to re-label first names correctly
firstup <- function(x) {
x <- tolower(x)
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
# create first names for students
student_roster$first_name <- firstup(colsplit(student_roster$Name," ", c("First","Last"))[,1])
# set student seed
student_roster$seed <- student_roster$Student_ID
student_roster <- student_roster[!is.na(student_roster$PS03),]
## List file names of individualized exam prompts
PS_path <- "PS03/graded"
problem_sets <- list.files(PS_path, recursive = T)
graded_PS <- problem_sets[grepl("_graded", problem_sets)]
View(student_roster)
## Define mail server
smtp <- server(host = "smtp.gmail.com",
port = 587,
username = "jeffreymziegler@gmail.com",
password = "Yahoo1010Bing!")
## Setup email template
email_template <- envelope()
## Define from, to, and CC addresses
email_template <- email_template %>%
from("jeffreymziegler@gmail.com") %>%
cc("zieglerj@tcd.ie")
## Define subject
email_template <- email_template %>%
subject("Applied Stats I: Graded PS02")
## Define subject
email_template <- email_template %>%
subject("Applied Stats I: Graded PS03")
# Define email body in HTML
html_body_template <-
paste0(
"<html><body>",
"Dear ",
"PLACEHOLDER_NAME",
",",
"<br><br>",
"Attached to this email you will find comments on your second problem set.",
"<br><br>",
"The solutions for the problem set are on GitHub.",# Please note that I have adjusted the total points to 80 rather than 100.",
"<br><br>",
"Please let me know if you have any questions or concerns!",
"<br><br>",
"Best,",
"<br>",
"Jeff",
"<br><br><br>",
"</body>",
"<br><br><br>",
"</html>"
)
# Define email body in HTML
html_body_template <-
paste0(
"<html><body>",
"Dear ",
"PLACEHOLDER_NAME",
",",
"<br><br>",
"Attached to this email you will find comments on your third problem set.",
"<br><br>",
"The solutions for the problem set are on GitHub.",# Please note that I have adjusted the total points to 80 rather than 100.",
"<br><br>",
"Please let me know if you have any questions or concerns!",
"<br><br>",
"Best,",
"<br>",
"Jeff",
"<br><br><br>",
"</body>",
"<br><br><br>",
"</html>"
)
for (i in 1:nrow(student_roster)) {
browser()
## Retrieve file path for individualized exam
individualized_PS <- paste(
PS_path, graded_PS[grepl(student_roster$Student_ID[i], graded_PS)], sep="/"
)
## Individualize HTML Body
html_body <- gsub("PLACEHOLDER_NAME",
student_roster$first_name[i],
html_body_template)
## Compose individualized email and add attachment
email <- email_template %>%
to(student_roster$Email[i]) %>%
html(html_body) %>%
attachment(path = individualized_PS, name = "PS02_graded.pdf")
## Send email
smtp(email, verbose = TRUE)
}
## Retrieve file path for individualized exam
individualized_PS <- paste(
PS_path, graded_PS[grepl(student_roster$Student_ID[i], graded_PS)], sep="/"
)
## Individualize HTML Body
html_body <- gsub("PLACEHOLDER_NAME",
student_roster$first_name[i],
html_body_template)
## Compose individualized email and add attachment
email <- email_template %>%
to(student_roster$Email[i]) %>%
html(html_body) %>%
attachment(path = individualized_PS, name = "PS02_graded.pdf")
individualized_PS
html_body
email
for (i in 1:nrow(student_roster)) {
#browser()
## Retrieve file path for individualized exam
individualized_PS <- paste(
PS_path, graded_PS[grepl(student_roster$Student_ID[i], graded_PS)], sep="/"
)
## Individualize HTML Body
html_body <- gsub("PLACEHOLDER_NAME",
student_roster$first_name[i],
html_body_template)
## Compose individualized email and add attachment
email <- email_template %>%
to(student_roster$Email[i]) %>%
html(html_body) %>%
attachment(path = individualized_PS, name = "PS02_graded.pdf")
## Send email
smtp(email, verbose = TRUE)
}
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("dplyr", "rmarkdown", "emayili", "reshape2"),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load student roster
student_roster <- read.csv("../grades/grades.csv")
# remove people who didn't complete assignment
#student_roster <- student_roster[!is.na(student_roster$PS01),]
# create function to re-label first names correctly
firstup <- function(x) {
x <- tolower(x)
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
# create first names for students
student_roster$first_name <- firstup(colsplit(student_roster$Name," ", c("First","Last"))[,1])
# set student seed
student_roster$seed <- student_roster$Student_ID
student_roster <- student_roster[!is.na(student_roster$PS04),]
View(student_roster)
# load student roster
student_roster <- read.csv("../grades/grades.csv")
# remove people who didn't complete assignment
#student_roster <- student_roster[!is.na(student_roster$PS01),]
# create function to re-label first names correctly
firstup <- function(x) {
x <- tolower(x)
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
# create first names for students
student_roster$first_name <- firstup(colsplit(student_roster$Name," ", c("First","Last"))[,1])
# set student seed
student_roster$seed <- student_roster$Student_ID
View(student_roster)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("dplyr", "rmarkdown", "emayili", "reshape2"),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
##############
# Load in data
##############
# load student roster
student_roster <- read.csv("../grades/grades.csv")
# remove people who didn't complete assignment
#student_roster <- student_roster[!is.na(student_roster$PS01),]
# create function to re-label first names correctly
firstup <- function(x) {
x <- tolower(x)
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
# create first names for students
student_roster$first_name <- firstup(colsplit(student_roster$Name," ", c("First","Last"))[,1])
# set student seed
student_roster$seed <- student_roster$Student_ID
student_roster <- student_roster[!is.na(student_roster$PS04),]
student_roster <- student_roster[student_roster$PS04!=0,]
# load student roster
student_roster <- read.csv("../grades/grades.csv")
# remove people who didn't complete assignment
#student_roster <- student_roster[!is.na(student_roster$PS01),]
# create function to re-label first names correctly
firstup <- function(x) {
x <- tolower(x)
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
# create first names for students
student_roster$first_name <- firstup(colsplit(student_roster$Name," ", c("First","Last"))[,1])
# set student seed
student_roster$seed <- student_roster$Student_ID
student_roster <- student_roster[!is.na(student_roster$PS04),]
View(student_roster)
student_roster <- student_roster[student_roster$PS04!=0,]
## List file names of individualized exam prompts
PS_path <- "PS04/graded"
problem_sets <- list.files(PS_path, recursive = T)
graded_PS <- problem_sets[grepl("_graded", problem_sets)]
graded_PS
## Define mail server
smtp <- server(host = "smtp.gmail.com",
port = 587,
username = "jeffreymziegler@gmail.com",
password = "Yahoo1010Bing!")
## Setup email template
email_template <- envelope()
## Define from, to, and CC addresses
email_template <- email_template %>%
from("jeffreymziegler@gmail.com") %>%
cc("zieglerj@tcd.ie")
## Define subject
email_template <- email_template %>%
subject("Applied Stats I: Graded PS04")
# Define email body in HTML
html_body_template <-
paste0(
"<html><body>",
"Dear ",
"PLACEHOLDER_NAME",
",",
"<br><br>",
"Attached to this email you will find comments on your fourth problem set.",
"<br><br>",
"The solutions for the problem set are on GitHub.",# Please note that I have adjusted the total points to 80 rather than 100.",
"<br><br>",
"Please let me know if you have any questions or concerns, looking forward to seeing you all again in a little over 10 days from now!",
"<br><br>",
"Best,",
"<br>",
"Jeff",
"<br><br><br>",
"</body>",
"<br><br><br>",
"</html>"
)
for (i in 1:nrow(student_roster)) {
browser()
## Retrieve file path for individualized exam
individualized_PS <- paste(
PS_path, graded_PS[grepl(student_roster$Student_ID[i], graded_PS)], sep="/"
)
## Individualize HTML Body
html_body <- gsub("PLACEHOLDER_NAME",
student_roster$first_name[i],
html_body_template)
## Compose individualized email and add attachment
email <- email_template %>%
to(student_roster$Email[i]) %>%
html(html_body) %>%
attachment(path = individualized_PS, name = "PS02_graded.pdf")
## Send email
smtp(email, verbose = TRUE)
}
## Retrieve file path for individualized exam
individualized_PS <- paste(
PS_path, graded_PS[grepl(student_roster$Student_ID[i], graded_PS)], sep="/"
)
individualized_PS
## Individualize HTML Body
html_body <- gsub("PLACEHOLDER_NAME",
student_roster$first_name[i],
html_body_template)
html_body
# Define email body in HTML
html_body_template <-
paste0(
"<html><body>",
"Dear ",
"PLACEHOLDER_NAME",
",",
"<br><br>",
"Attached to this email you will find comments on your fourth problem set.",
"<br><br>",
"The solutions for the problem set are on GitHub.",# Please note that I have adjusted the total points to 80 rather than 100.",
"<br><br>",
"Please let me know if you have any questions or concerns, looking forward to seeing most of you again in a little over 10 days from now!",
"<br><br>",
"Best,",
"<br>",
"Jeff",
"<br><br><br>",
"</body>",
"<br><br><br>",
"</html>"
)
for (i in 1:nrow(student_roster)) {
browser()
## Retrieve file path for individualized exam
individualized_PS <- paste(
PS_path, graded_PS[grepl(student_roster$Student_ID[i], graded_PS)], sep="/"
)
## Individualize HTML Body
html_body <- gsub("PLACEHOLDER_NAME",
student_roster$first_name[i],
html_body_template)
## Compose individualized email and add attachment
email <- email_template %>%
to(student_roster$Email[i]) %>%
html(html_body) %>%
attachment(path = individualized_PS, name = "PS04_graded.pdf")
## Send email
smtp(email, verbose = TRUE)
}
## Retrieve file path for individualized exam
individualized_PS <- paste(
PS_path, graded_PS[grepl(student_roster$Student_ID[i], graded_PS)], sep="/"
)
## Individualize HTML Body
html_body <- gsub("PLACEHOLDER_NAME",
student_roster$first_name[i],
html_body_template)
## Compose individualized email and add attachment
email <- email_template %>%
to(student_roster$Email[i]) %>%
html(html_body) %>%
attachment(path = individualized_PS, name = "PS04_graded.pdf")
email
for (i in 1:nrow(student_roster)) {
# browser()
## Retrieve file path for individualized exam
individualized_PS <- paste(
PS_path, graded_PS[grepl(student_roster$Student_ID[i], graded_PS)], sep="/"
)
## Individualize HTML Body
html_body <- gsub("PLACEHOLDER_NAME",
student_roster$first_name[i],
html_body_template)
## Compose individualized email and add attachment
email <- email_template %>%
to(student_roster$Email[i]) %>%
html(html_body) %>%
attachment(path = individualized_PS, name = "PS04_graded.pdf")
## Send email
smtp(email, verbose = TRUE)
}
